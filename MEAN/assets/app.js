angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$http",function(o,t,e){o.$on("login",function(t,e){o.currentUser=e}),e.defaults.headers.common["X-Auth"]=window.localStorage.token,t.getUser().then(function(t){o.currentUser=t.data}),o.logOut=function(){o.currentUser="",t.logOut()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location","$route",function(o,t,e,n){o.login=function(n,r){t.login(n,r).then(function(t){o.$emit("login",t.data),e.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){o.deletePost=function(){console.log("trying to delete a post")},o.addPost=function(){o.postBody&&window.localStorage.token?t.create({body:o.postBody}).success(function(t){o.posts.unshift(t),o.postBody=null,console.log(window.localStorage.token),console.log(t._id),console.log(t.body),o.msg="Success"}):(window.localStorage.token||o.postBody)&&window.localStorage.token&&!o.postBody?o.msg="Please fill out the body!":o.msg="You must log in to post!"},t.fetch().success(function(t){o.posts=t})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("http://localhost:3002/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(o,t,e){o.register=function(n,r){t.register(n,r).then(function(t){o.$emit("login",t),e.path("/")})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(e,n){return o.post("/api/sessions",{username:e,password:n}).then(function(e){return window.localStorage.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,t.getUser()})},t.logOut=function(){delete window.localStorage.token},t.register=function(t,e){return o.post("/api/users",{username:t,password:e}).then(function(){})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
